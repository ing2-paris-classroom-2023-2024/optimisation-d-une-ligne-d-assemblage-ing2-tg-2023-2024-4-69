#include <stdio.h>
#include <stdlib.h>
#include <stdio.h>



struct Arc
{
    int sommet; // numéro de sommet d'un arc adjacent au sommet initial
    int valeur;
    int poids;
    struct Arc* arc_suivant;
};

/* Alias de pointeur sur un Arc */
typedef struct Arc* pArc;

/* Structure d'un sommet*/
struct Sommet
{
    struct Arc* arc;
    int valeur;
    char couleur;

};

/* Alias de pointeur sur un Sommet */
typedef struct Sommet* pSommet;

/* Alias d'un Graphe */
typedef struct Graphe
{
    int taille;
    int orientation;
    int ordre;
    pSommet* pSommet;
} Graphe;

typedef struct ensemble{
    int parent;
    int rang;
}t_ensemble;

/* affichage des successeurs du sommet num*/
void afficher_successeurs(pSommet *sommet, int num) {

    printf("sommet %d :\n", num);
    pArc arc = sommet[num]->arc;

    while (arc != NULL) {
        printf("%d ", arc->sommet);
        arc = arc->arc_suivant;
    }
}

// Ajouter l'arête entre les sommets s1 et s2 du graphe
pSommet *creer_arete(pSommet *sommet, int s1, int s2, int poids) {

    if (sommet[s1]->arc == NULL) {
        pArc Newarc = (pArc) malloc(sizeof(struct Arc));
        Newarc->sommet = s2;
        Newarc->poids = poids;
        Newarc->arc_suivant = NULL;
        sommet[s1]->arc = Newarc;
        return sommet;
    } else {
        pArc temp = sommet[s1]->arc;
        while (temp->arc_suivant != NULL) {
            temp = temp->arc_suivant;
        }
        pArc Newarc = (pArc) malloc(sizeof(struct Arc));
        Newarc->sommet = s2;
        Newarc->poids = poids;
        Newarc->arc_suivant = NULL;
        if (temp->sommet > s2) {
            Newarc->arc_suivant = temp->arc_suivant;
            Newarc->sommet = temp->sommet;
            temp->sommet = s2;
            temp->arc_suivant = Newarc;
            return sommet;
        }
        temp->arc_suivant = Newarc;
        return sommet;
    }
}

// créer le graphe
Graphe *cree_graphe(int ordre) {
    Graphe *Newgraphe = (Graphe *) malloc(sizeof(Graphe));
    Newgraphe->pSommet = (pSommet *) malloc(ordre * sizeof(pSommet));

    for (int i = 0; i < ordre; i++) {
        Newgraphe->pSommet[i] = (pSommet) malloc(sizeof(struct Sommet));
        Newgraphe->pSommet[i]->arc = NULL;
    }
    return Newgraphe;
}


/* La construction du réseau peut se faire à partir d'un fichier dont le nom est passé en paramètre
Le fichier contient : ordre, taille, orientation (0 ou 1) et liste des arcs */
Graphe *lire_graphe(char *nomFichier) {
    Graphe *graphe;
    FILE *ifs = fopen(nomFichier, "r");
    int taille, ordre, s1, s2, poids;

    if (ifs == NULL) {
        printf("Erreur de lecture fichier\n");
        exit(-1);
    }

    fscanf(ifs, "%d", &ordre);
    graphe = cree_graphe(ordre);  //  On initialise le graphe d'ordre sommets avec les informations nécessaires

    fscanf(ifs, "%d", &taille);
    graphe->ordre = ordre;


    // On créer les arêtes du graphe
    for (int i = 0; i < taille; i++) {
        fscanf(ifs, "%d%d%d", &s1, &s2, &poids);
        graphe->pSommet = creer_arete(graphe->pSommet, s1, s2, poids);
        graphe->pSommet = creer_arete(graphe->pSommet, s2, s1, poids);
    }
    fclose(ifs);
    return graphe;
}

/*ici on compare le poids des aretes pour savoir laquelle prendre, si le poids est similaire on les classe en fonction
de la somme des indices des sommets, de cette façon on est sur d'obtenir le meme resultat a chque fois*/
int ComparerArretes(const void *a, const void *b) {
    pArc areteA = *(pArc *) a;
    pArc areteB = *(pArc *) b;


    if (areteA->poids == areteB->poids) {
        return (areteA->sommet + areteA->arc_suivant->sommet) -
               (areteB->sommet + areteB->arc_suivant->sommet);
    }

    return areteA->poids - areteB->poids;
}
